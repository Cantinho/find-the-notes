package com.findthenotes.findthenotes.service;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.util.Log;

public class GameService extends Service {

    /**
     * Tag used to identify logs generated by the GameService class.
     */
    private static final String TAG = GameService.class.getCanonicalName();

    /**
     * Used to identify a Start Game message by the GameServiceHandler.
     */
    private static final int START_GAME = 0;

    /**
     * Used to identify a Resume Game message by the GameServiceHandler.
     */
    private static final int RESUME_GAME = 1;

    /**
     * Used to identify a Stop Game message by the GameServiceHandler.
     */
    private static final int STOP_GAME = 2;

    /**
     * Used to bind as well as an access point to this GameService.
     */
    private final GameServiceBinder mBinder = new GameServiceBinder();

    /**
     * An access point to the main loop of the application.
     */
    private final Handler mainHandler = new Handler(Looper.getMainLooper());

    /**
     * A instance of the handler to manage threads to run on the UI thread.
     */
    private GameServiceHandler mGameServiceHandler;

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        //TODO do something useful
        return Service.START_NOT_STICKY;
    }

    @Override
    public IBinder onBind(Intent intent) {
        //TODO for communication return IBinder implementation
        return null;
    }

    public class GameServiceBinder extends Binder {
        public GameService getService() {
            return GameService.this;
        }
    }

    protected class APIBodyCall {
        private final IApiCall call;
        private final IApiCall.APICallResponse callback;

        APIBodyCall(IApiCall call, IApiCall.APICallResponse callback) {
            this.call = call;
            this.callback = callback;
        }

        public IApiCall getCall() {
            return call;
        }

        IApiCall.APICallResponse getCallback() {
            return callback;
        }
    }

    public final class GameServiceHandler extends Handler {

        GameServiceHandler(Looper looper) {
            super(looper);
        }

        @Override
        public void handleMessage(Message message) {
            super.handleMessage(message);
            switch (message.what) {
                case START_GAME:
                    doStartGame((APIBodyCall) message.obj);
            }
        }
    }

    /**
     * Sends message to GameService thread handler requesting to start game.
     *
     * @param startGameRequest a Start Game request.
     * @param callbackResponse an APICallbackResponse response object.
     */
    public void startGame(IApiCall startGameRequest, IApiCall.APICallbackResponse callbackResponse) {
        Log.i(TAG, "(StartGame) [GameService] Start Game");
        Message message = mGameServiceHandler.obtainMessage(START_GAME);
        message.obj = new APIBodyCall(startGameRequest, callbackResponse);
        mGameServiceHandler.sendMessage(message);
    }

    private void doStartGame(final APIBodyCall startGameApiBodyCall) {
        Log.i(TAG, "(doStartGame) [GameService] Do Start Game");
        StartGameRequest startGameRequest = (StartGameRequest) startGameApiBodyCall.getCall();

        final IApiCall.APICallbackResponse callbackResponse = (IApiCall.APICallbackResponse)
                startGameApiBodyCall.getCallback();

        if(callbackResponse != null) {
            StartGameResponse startGameResponse = new StartGameResponse(startGameRequest);
            callbackResponse.onResponse(startGameResponse);
        }
    }

}